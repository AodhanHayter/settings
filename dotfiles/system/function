#!/usr/bin/env zsh

# This file is sourced from ../runcom/zshrc

# Exports environment variables defined in a .env or .localenv file
function setenv() {
  if [ -f .env ]; then
    export $(cat .env | xargs)
  fi
  if [ -f .localenv ]; then
    export $(cat .localenv | xargs)
  fi
}

# Generate random characters and export it
function randomness() {
  export RANDOMNESS=$(openssl rand -base64 10)
}

function mux_portal() {
  local PORTAL_DIR=$HOME/development/pp/portal

  tmux start-server
  tmux new-session -d -c $PORTAL_DIR -s portal -n web
  tmux new-window -t portal:2 -c $PORTAL_DIR -n server

  tmux select-window -t portal:1
  tmux attach-session -t portal
}

function mux_frontend_course() {
  local PROJECT_DIR=$HOME/development/boomcamp/frontend-course

  tmux start-server
  tmux new-session -d -c $PROJECT_DIR -s fr-course -n code
  tmux new-window -t fr-course:2 $PROJECT_DIR -n term

  tmux select-window -t fr-course:1
  tmux attach-session -t fr-course
}

# Switch and create tmux sessions from inside of other sessions
function tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
     tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# Easily connect to postgress instances with pg_service.conf
function pg() {
  if [ $1 ]; then
    PGSERVICE=$1 psql
  else
    echo 'A valid service name is required for this function'
  fi
}
