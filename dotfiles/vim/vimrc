" Basic Settings
""""""""""""""""
filetype on
filetype plugin on
filetype indent on
scriptencoding utf-8
syntax on

let python_highlight_all=1
set term=xterm-256color
set encoding=utf-8
set clipboard=unnamed
set backupcopy=yes
set colorcolumn=100
set number
set relativenumber
set noshowmode
set nocompatible
set laststatus=2
set path+=**
set tags=tags;
set wildmenu
set backspace=indent,eol,start
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
set smartindent
set autoindent
set hidden

set updatetime=250
set timeoutlen=1000
set ttimeoutlen=10
set history=100

set hlsearch " search highlight found words
set showmatch " show matching parens
set listchars=trail:Â·,tab:>-
set list

" leader maps
""""""""""""""
let mapleader=" "
map <leader>S :source ~/.vim/vimrc<CR>
map <leader>co :set cursorcolumn!<CR>

" find word under cursor
map <leader>f :Find <C-R><C-W><CR>

" use escape to remove highlight from search
""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
nnoremap <esc>^[ <esc>^[

" keep selected text selected when fixing indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap < <gv
vnoremap > >gv

" autocmds
""""""""""
autocmd BufWritePre * :%s/\s\+$//e " remove whitespaces on save
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

" Vim Plug
""""""""""
call plug#begin('~/settings/dotfiles/vim/plugs')

Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'maralla/completor.vim', { 'do': 'make js' }
Plug 'itchyny/lightline.vim'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'mbbill/undotree'
Plug 'vim-scripts/DrawIt'
Plug 'airblade/vim-gitgutter'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'flowtype/vim-flow', { 'for': 'javascript' }
Plug 'digitaltoad/vim-pug', { 'for': 'pug' }
Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'ElmCast/elm-vim', { 'for': 'elm' }
Plug 'cohama/lexima.vim'
Plug 'craigemery/vim-autotag'
Plug 'Traap/vim-dragvisuals'
Plug 'trevordmiller/nova-vim'

call plug#end()

" theme
"""""""
colorscheme nova

" elm-vim
"""""
let g:elm_format_autosave=1

" Easy Motion
"""""""""""""
nmap F <Plug>(easymotion-prefix)s

" Easy Align
""""""""""""

"Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

"Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" fzf
"""""
" search files
map <leader>t :Files<CR>
map <leader>b :Buffers<CR>

" Match theme colors
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Shows file preview
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Custom :Find command for full text search
command! -bang -nargs=* Find
  \ call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" auto-tags
let g:autotagTagsFile='tags'

" Completer
"""""""""""
let g:completor_racer_binary = '~/.cargo/bin/racer'

" ALE
"""""
map <leader>af :ALEFix<CR>

let g:ale_linters = {
      \ 'javascript': ['eslint', 'flow'],
      \ 'elixir': ['credo'],
      \ 'python': ['flake8'],
      \ 'elm': ['elm-make']
      \}

let g:ale_fixers = {
  \ 'javascript': ['prettier'],
  \ 'sh': ['shfmt -i 2']
  \}

" Vim Flow
""""""""""
let g:flow#autoclose = 1
let g:flow#enable = 0

" nerd-tree
"""""""""""
map <leader>ff :NERDTreeFind<CR>
map <C-\> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp', '\.pyc', '__pycache__']

" dravisual settings
""""""""""""""""""""
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

" remove any introduced trailing whitespace after moving
let g:DVB_TrimWS = 1

" lightline setup
"""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFilename'
      \ }
      \ }


function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  return &readonly ? ' [read only]' : ''
endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ''.branch : ''

  endif
  return ''
endfunction

function! LightLineFilename()
  let nr = bufnr('')
  return nr . ':' .
    \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '') .
    \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '')
endfunction

" python with virtualenv support
py << EOF
import os

if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF


