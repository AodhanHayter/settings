" Basic Settings
""""""""""""""""
filetype on
filetype plugin on
filetype indent on
scriptencoding utf-8
syntax on

let python_highlight_all=1
set term=xterm-256color
set encoding=utf-8
set clipboard=unnamed
set backupcopy=yes
set colorcolumn=100
set cmdheight=2
set signcolumn=number
set number
set relativenumber
set noshowmode
set nocompatible
set laststatus=2
set path+=**
set tags=tags;
set wildmenu
set backspace=indent,eol,start
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
set smartindent
set autoindent
set hidden
set mouse=a
set ttymouse=xterm

set updatetime=250
set timeoutlen=1000
set ttimeoutlen=10
set history=100

set hlsearch " search highlight found words
set showmatch " show matching parens
set listchars=trail:Â·
set list

" persistent undo
set undofile
if has('persistent_undo')
  set undodir=~/.vim/.undo//
  if !isdirectory(&undodir)
    call mkdir(&undodir, 'p')
  endif
endif

" central swp file location
set directory=~/.vim/.swp//
if !isdirectory(&directory)
  call mkdir(&directory, 'p')
endif

" leader maps
""""""""""""""
let mapleader=" "
map <leader>S :source ~/.vim/vimrc<CR>
map <leader>co :set cursorcolumn!<CR>

" find word under cursor
map <leader>f :Find <C-R><C-W><CR>


" keep selected text selected when fixing indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap < <gv
vnoremap > >gv

" autocmds
""""""""""
autocmd BufWritePre * :%s/\s\+$//e " remove whitespaces on save
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

" ALE pre plugin setup
let g:ale_disable_lsp = 1

" Vim Plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto install plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/settings/dotfiles/vim/plugs')

" File Explorer
"""""""""""""""
Plug 'scrooloose/nerdtree'

" Autocomplete Crap
"""""""""""""""""""
Plug 'dense-analysis/ale'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Javascript Completion
"""

" Reason Completion
"""
Plug 'reasonml-editor/vim-reason-plus'

" Buffer / Pane UI
""""""""""""""""""
Plug 'itchyny/lightline.vim'

" Fuzzy Search
""""""""""""""
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-slash'

" Movement Helpers
""""""""""""""""""
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
Plug 'tmhedberg/matchit'
Plug 'Traap/vim-dragvisuals'

" Git Helpers
"""""""""""""
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'junegunn/gv.vim'

" Quick insert helpers
"""""""""""""""
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'itmammoth/doorboy.vim'

" Undo tree explorer
""""""""""""""""""""
Plug 'mbbill/undotree'
Plug 'yegappan/mru'

" Language Highlighting
"""""""""""""""""""""""
Plug 'sheerun/vim-polyglot'

" Lisp Junk
"""""""""""
Plug 'eraserhd/parinfer-rust', { 'for': 'racket', 'do': 'cargo build --release' }
Plug 'jpalardy/vim-slime'

" Markdown
""""""""""
Plug 'iamcco/markdown-preview.nvim', { 'for': 'markdown', 'do': 'cd app & npm install' }

" Themes
""""""""
Plug 'trevordmiller/nova-vim'

call plug#end()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set Theme
"""""""
colorscheme nova

" vim-gitgutter settings
""""""""""""""""""""""""
highlight clear SignColumn

" elm-vim
"""""""""
let g:elm_format_autosave = 1

" markdown-preview
let g:mkdp_auto_close = 0

" vim-slash
noremap <plug>(slash-after) zz
if has('timers')
  noremap <expr> <plug>(slash-after) slash#blink(3, 100)
endif

" Easy Motion
"""""""""""""
nmap F <Plug>(easymotion-prefix)s

" Easy Align
""""""""""""
"Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

"Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" fzf
"""""
" search files
nmap <leader>t :Files<CR>

" search open buffers
nmap <leader>b :Buffers<CR>

" search commits
"" for buffer
nmap <leader>gc :BCommits<CR>
"" for projection
nmap <leader>gC :Commits<CR>

" search project files for a pattern
nmap <leader>s :Find<CR>

" search command history
nmap <leader>H :History:<CR>

" Match theme colors
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Shows file preview
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Custom :Find command for full text search
command! -bang -nargs=* Find
  \ call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --glob "!tags" --glob "!build" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" Coc
"""""
nmap <leader>cf :CocFix<CR>
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gt <Plug>(coc-type-definition)
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <leader>rn <Plug>(coc-rename)
nnoremap <silent> <leader>st :call CocAction('doHover')<CR>

command! -nargs=0 Format :call CocAction('format')
nmap <leader>af :Format<CR>

" ALE
"""""
" nmap <leader>af :ALEFix<CR>
nmap <leader>an :ALENext<CR>

let g:ale_completion_enabled = 0

let g:ale_linters = {
  \ 'javascript': ['eslint'],
  \ 'reason': ['reason-language-server'],
  \ 'typescript': ['tsserver', 'eslint'],
  \ 'elixir': ['credo'],
  \ 'python': ['flake8'],
  \ 'elm': ['elm-make'],
  \ 'sh': ['shellcheck']
  \}

let g:ale_linters_ignore = {
  \ 'typescript': ['tslint'],
  \ 'reason': ['ols']
  \}


let g:ale_javascript_prettier_options = '--prose-wrap always'

let g:ale_fixers = {
  \ 'html': ['prettier'],
  \ 'css': ['prettier'],
  \ 'javascript': ['prettier'],
  \ 'reason': ['refmt'],
  \ 'json': ['prettier'],
  \ 'less': ['prettier'],
  \ 'markdown': ['prettier'],
  \ 'typescript': ['prettier'],
  \ 'typescriptreact': ['prettier'],
  \ 'sh': ['shfmt -i 2'],
  \ 'purescript': ['purty'],
  \ 'elixir': ['mix_format'],
  \ 'sql': ['pgformatter']
  \}

" nerd-tree
"""""""""""
map <leader>ff :NERDTreeFind<CR>
map <C-\> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp', '\.pyc', '__pycache__']

" dravisual settings
""""""""""""""""""""
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

" remove any introduced trailing whitespace after moving
let g:DVB_TrimWS = 1

" vim slime
""""""""""""
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

" lightline setup
"""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFilename'
      \ }
      \ }


function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  return &readonly ? ' [read only]' : ''
endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ''.branch : ''

  endif
  return ''
endfunction

function! LightLineFilename()
  let nr = bufnr('')
  return nr . ':' .
    \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '') .
    \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '')
endfunction
